import React, { useState, useEffect } from 'react';
import { useLocation } from 'wouter';
import { PersonalInfo, Images } from './types';
import { useToast } from '../components/Toast';
import { useMutation, useQuery } from '@tanstack/react-query';
import { apiRequest } from '../utils/apiRequest';

export default function SignatureBuilder() {
  const [location] = useLocation();
  const urlParams = new URLSearchParams(window.location.search);
  const signatureId = urlParams.get('signature');

  const [personalInfo, setPersonalInfo] = useState<PersonalInfo>({
    name: "Sarah Johnson",
    title: "Senior Marketing Director",
    company: "Signatar",
    email: "sjohnson@signatar.com",
    phone: "+1 (555) 123-4567",
    website: "https://www.signatar.com",
  });

  const [images, setImages] = useState<Images>({
    logo: signatarLogo,
    headshot: defaultHeadshot,
    backgroundOpacity: 20,
    headshotSize: 110,
    logoSize: 160
  });

  const { toast } = useToast();

  const { data: existingSignature, isLoading: isLoadingSignature } = useQuery({
    queryKey: ["/api/signatures", signatureId],
    enabled: !!signatureId,
    retry: 1,
  });

  useEffect(() => {
    if (existingSignature && signatureId) {
      const sig = existingSignature as Signature;

      // Load existing image data
      setImages({
        logo: sig.images.logo,
        headshot: sig.images.headshot,
        backgroundOpacity: sig.images.backgroundOpacity,
        headshotSize: sig.images.headshotSize,
        logoSize: sig.images.logoSize,
      });

      // Load personal info
      setPersonalInfo(sig.personalInfo);
    }
  }, [existingSignature, signatureId]);

  const handleSave = async () => {
    const originalImages = {
      logo: images.logo,
      headshot: images.headshot,
    };

    const styledImages = {
      logo: {
        url: images.logo,
        styles: getImageStyles(images.logoSize),
      },
      headshot: {
        url: images.headshot,
        styles: getImageStyles(images.headshotSize),
      }
    };

    await saveSignature({ personalInfo, originalImages, styledImages });
  };

  const saveSignatureMutation = useMutation({
    mutationFn: async (signatureData: InsertSignature) => {
      return await apiRequest("POST", "/api/signatures", signatureData);
    },
    onSuccess: () => {
      toast({
        title: "Signature Saved",
        description: "Your signature has been saved to your account.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Save Failed",
        description: error.message || "Failed to save signature. Please try again.",
        variant: "destructive",
      });
    },
  });

  const getImageStyles = (size: number) => ({
    width: `${size}px`,
    height: `${size}px`,
    objectFit: 'cover',
  });

  return (
    <div>
      <img src={images.headshot} style={getImageStyles(images.headshotSize)} alt="Headshot" />
      <img src={images.logo} style={getImageStyles(images.logoSize)} alt="Logo" />
      <button onClick={handleSave}>Save Signature</button>
    </div>
  );
}